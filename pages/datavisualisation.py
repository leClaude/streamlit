# Data Visualisation
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

# Chargement des datasets
@st.cache_data
def load_data():
    df_fr = pd.read_csv("data/mars-2014-complete.csv", encoding="latin1", sep=";")
    df_eu = pd.read_csv("data/CO2_passenger_cars_v10.csv", sep ="\t", encoding='utf-8', index_col='id', on_bad_lines='warn')
    return df_fr, df_eu

# Fonction pour g√©n√©rer le boxplot
@st.cache_data
def generate_boxplot(df_plot):
    fig = px.box(df_plot, x='Dataset', y='CO2', color='Dataset',
                 points='outliers',  # Limiter les points √† afficher aux valeurs aberrantes
                 labels={'CO2': '√âmissions de CO2 (g/km)'},
                 title='Distribution interactive des √©missions de CO2')
    return fig

# Fonction pour g√©n√©rer l'histogramme
@st.cache_data
def generate_histogram(df_fr, df_eu):
    fig, axes = plt.subplots(1, 2, figsize=(18, 5))

    # Histogramme pour Europe 2014
    sns.histplot(df_eu['e (g/km)'], ax=axes[0], bins=30, kde=False, color="#21918c", alpha=0.6, label="Europe 2014")
    
    # Histogramme pour ADEME 2014
    sns.histplot(df_fr['co2'], ax=axes[0], bins=30, kde=False, color="#fde725", alpha=0.6, label="Ademe 2014")
    
    # Titre et labels
    axes[0].set_title("Histogramme des √©missions de CO2")
    axes[0].set_xlabel("√âmissions de CO2 (g/km)")
    axes[0].set_ylabel("Nombre de v√©hicules")
    axes[0].legend()

    return fig

# Fonction pour g√©n√©rer le graphique KDE (densit√©)
@st.cache_data
def generate_kde_plot(df_fr, df_eu):
    fig, axes = plt.subplots(1, 2, figsize=(18, 5))

    # KDE pour Europe 2014
    sns.kdeplot(df_eu['e (g/km)'], ax=axes[1], fill=True, alpha=0.5, color="#21918c", label="Europe 2014")
    
    # KDE pour ADEME 2014
    sns.kdeplot(df_fr['co2'], ax=axes[1], fill=True, alpha=0.5, color="#fde725", label="ADEME 2014")
    
    # Titre et labels
    axes[1].set_title("Densit√© des √©missions de CO2 (KDE)")
    axes[1].set_xlabel("√âmissions de CO2 (g/km)")
    axes[1].legend()

    return fig

def generate_distribution_plots(df_fr):
    fig, axes = plt.subplots(1, 2, figsize=(15, 15))
    plt.subplots_adjust(wspace=1)

    # R√©partition des constructeurs dans le dataset ADEME
    constructeurs = df_fr["lib_mrq"].value_counts()
    constructeurs_autres = constructeurs.copy()
    constructeurs_autres["Autres"] = constructeurs_autres[~constructeurs_autres.index.isin(['MERCEDES', 'VOLKSWAGEN'])].sum()
    constructeurs_autres = constructeurs_autres.loc[['MERCEDES', 'VOLKSWAGEN', "Autres"]]

    # Cr√©ation du camembert pour les constructeurs
    colors = sns.color_palette('Set2')
    axes[0].pie(constructeurs_autres, labels=constructeurs_autres.index, autopct='%1.1f%%', colors=colors, startangle=90)
    axes[0].set_title("R√©partition des constructeurs (ADEME 2014)")

    # R√©partition des carrosseries (Ademe)
    carrosserie = df_fr['Carrosserie'].value_counts()
    carrosserie_autres = carrosserie.copy()
    carrosserie_autres["Autres"] = carrosserie_autres[~carrosserie_autres.index.isin(['BERLINE', 'MINIBUS', 'BREAK', 'TS TERRAINS/CHEMINS'])].sum()
    carrosserie_autres = carrosserie_autres.loc[['BERLINE', 'MINIBUS', 'BREAK', 'TS TERRAINS/CHEMINS', 'Autres']]

    # Cr√©ation du camembert pour les carrosseries
    colors2 = sns.color_palette('Set3')
    axes[1].pie(carrosserie_autres, labels=carrosserie_autres.index, autopct='%1.1f%%', pctdistance=0.85, colors=('#fc8d62', '#66c2a5', '#e78ac3', '#a6d854', '#8da0cb'), startangle=45)
    axes[1].set_title('R√©partition des diff√©rentes carrosseries (ADEME 2014)')

    return fig

def show():
    st.title("üìä Datavizualisation")
    st.subheader("üéØ Distribution de la variable cible")

    # Chargement des donn√©es
    df_fr, df_eu = load_data()

    # Pr√©paration des donn√©es pour la comparaison
    df_fr_plot = df_fr[['co2']].copy()
    df_fr_plot = df_fr_plot.rename(columns={'co2': 'CO2'})
    df_fr_plot['Dataset'] = 'France'

    df_eu_plot = df_eu[['e (g/km)']].copy()
    df_eu_plot = df_eu_plot.rename(columns={'e (g/km)': 'CO2'})
    df_eu_plot['Dataset'] = 'Europe'

    df_plot = pd.concat([df_fr_plot, df_eu_plot], ignore_index=True)
    df_plot = df_plot.dropna(subset=['CO2'])

    # G√©n√©rer le boxplot en utilisant la fonction mise en cache
    fig_boxplot = generate_boxplot(df_plot)

    # Affichage du graphique
    st.plotly_chart(fig_boxplot, use_container_width=True)

    # Affichage du texte explicatif
    st.markdown("""
                Le graphique ci-dessus illustre la r√©partition des √©missions de CO2 dans les deux jeux de donn√©es. On constate des diff√©rences l√©g√®res entre les distributions des donn√©es de l'ADEME 2014 et de l'Europe 2014. 
                
                Dans le jeu de donn√©es de l'ADEME, la m√©diane des √©missions de CO2 est de 205 g/km, avec une majorit√© des valeurs regroup√©es autour de cette m√©diane. Plusieurs valeurs aberrantes sont observ√©es, en dessous de 150 g/km et au-dessus de 250 g/km, ce qui pourrait correspondre √† des v√©hicules tr√®s √©conomes en carburant ou tr√®s polluants. En revanche, dans le jeu de donn√©es europ√©en, la m√©diane des √©missions de CO2 est plus faible, se situant autour de 132 g/km. La bo√Æte est √©galement plus √©troite, sugg√©rant une faible variabilit√© des √©missions. Bien que les deux jeux de donn√©es pr√©sentent des valeurs extr√™mes, celles-ci sont plus fr√©quentes dans le jeu de donn√©es europ√©en.
                """)

    # G√©n√©rer l'histogramme en utilisant la fonction mise en cache
    fig_histogram = generate_histogram(df_fr, df_eu)

    # Affichage de l'histogramme
    st.pyplot(fig_histogram)

    st.markdown("""
                L'histogramme ci-dessus illustre la r√©partition des √©missions de CO2 dans les deux jeux de donn√©es : Ademe 2014 (en jaune) et Europe 2014 (en bleu-vert). On observe que, de mani√®re g√©n√©rale, les √©missions sont plus √©lev√©es dans le jeu de donn√©es de l'Ademe, avec un pic autour de 200 g/km. Les v√©hicules de cette base de donn√©es semblent ainsi √™tre, en moyenne, plus polluants que ceux pr√©sents dans la base Europe 2014.
                """)
    
    # G√©n√©rer le graphique KDE en utilisant la fonction mise en cache
    fig_kde = generate_kde_plot(df_fr, df_eu)

    # Affichage du graphique KDE
    st.pyplot(fig_kde)

    st.markdown("""
                
                Le graphique ci-dessus repr√©sente la densit√© des √©missions de CO2 pour chaque dataset. Il permet de mieux visualiser la distribution sans √™tre affect√© par les tailles d‚Äô√©chantillons diff√©rentes. Ces deux courbes confirment ce que nous avons pu observer pr√©c√©demment. La distribution des √©missions de CO2 dans le jeux de donn√©es de l‚ÄôAdeme est plus concentr√©e et poss√®de un pic tr√®s marqu√© autour de  200g/km. Cela sugg√®re que les v√©hicules de cette base sont plus homog√®nes et ont, en moyenne, des √©missions plus √©lev√©es.

                """)
    
    st.subheader("R√©partition des entr√©es par constructeur et carrosserie")

    st.markdown("""
                - R√©partition des constructeurs
                Lorsque l'on regarde les constructeurs pr√©sents dans le jeu de donn√©es de l'Ademe, on remarque une tr√®s forte repr√©sentation des v√©hicules Mercedes (65.8%) ainsi que Volkswagen(24.9%). Les autres constructeurs sont regroup√©s dans la cat√©gorie ‚ÄúAutres‚Äù et ne repr√©sentent que 9,3%.
                Cette r√©partition des constructeurs peut potentiellement influencer les r√©sultats si l‚Äôon cherche √† g√©n√©raliser l‚Äôanalyse √† l‚Äôensemble du march√© automobile.
                - R√©partition des carrosseries
                Les minibus dominent avec 83.8%. Les berlines repr√©sentent 8% du total. Les autres carrosseries sont tr√®s peu repr√©sent√©es.
                Ce d√©s√©quilibre peut √©galement influencer les pr√©dictions d'√©missions des autres v√©hicules.

                """)
    # G√©n√©rer les graphiques de r√©partition
    fig_distribution = generate_distribution_plots(df_fr)

     # Affichage des graphiques dans Streamlit
    st.pyplot(fig_distribution)