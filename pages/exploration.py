# Exploration
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


# Chargement des datasets
@st.cache_data
def load_data():
    df_fr = pd.read_csv("data/mars-2014-complete.csv", encoding="latin1", sep=";")
    df_eu = pd.read_csv("data/CO2_passenger_cars_v10.csv", sep ="\t", encoding='utf-8', index_col='id', on_bad_lines='warn')
    return df_fr, df_eu

df_france, df_europe = load_data()

# Interface utilisateur
st.title("üîç Exploration des donn√©es")

dataset_choice = st.selectbox("S√©lectionnez un dataset :", ["Dataset fran√ßais", "Dataset europ√©en"])

# Choix du dataset
if dataset_choice == "Dataset fran√ßais":
    df = df_france.copy()
else:
    df = df_europe.copy()

st.subheader("Aper√ßu des donn√©es")
st.dataframe(df.head())

#Pr√©sentation de la source
    
st.subheader("Source")
if dataset_choice == "Dataset fran√ßais":
    st.markdown("""
    Ces donn√©es sont collect√©es par l‚ÄôADEME aupr√®s de l'Union Technique de l‚ÄôAutomobile du motocycle et du Cycle ‚Äì UTAC (en charge de l‚Äôhomologation des v√©hicules avant leur mise en vente) et sont disponibles librement sur le site data.gouv.fr. Il comprend pour chaque v√©hicule des caract√©ristiques telles que : le type de carburant, la consommation, le poids du v√©hicule , sa puissance, sa cylindr√©e et ses √©missions de CO2. 
                    
                    
    Il est compos√© de 55 044 lignes et 26 colonnes.
                """)
else:
    st.markdown("""
            Ce jeu de donn√©es reprend tous les enregistrements des voitures immatricul√©es dans l‚ÄôUnion Europ√©enne. Il est mis √† disposition par l‚ÄôAgence Europ√©enne de l‚ÄôEnvironnement. Les informations sont enregistr√©es par chaque Etat membre. Il comprend notamment: le nom du constructeur, les poids des et dimensions des v√©hicules, la cylindr√©e, la puissance du moteur, le type de carburant.

                
            Il est compos√© de 417 938 lignes et 26 colonnes.
            """)
    
if dataset_choice == "Dataset fran√ßais" and st.checkbox("Afficher la description des colonnes"):
    meta_data = {
        "nom-colonne": [
            "lib_mrq_utac", "lib_mod_doss", "lib_mod", "dscom", "cnit", "tvv", "cod_cbr", "hybride",
            "puiss_admin_98", "puiss_max", "typ_boite_nb_rapp", "conso_urb", "conso_exurb",
            "conso_mixte", "co2", "co_typ_1", "hc", "nox", "hcnox", "ptcl", "masse_ordma_min",
            "masse_ordma_max", "champ_v9", "date_maj", "Carrosserie", "gamme"
        ],
        "typerubrique": [
            "varchar", "varchar", "varchar", "varchar", "varchar", "varchar", "varchar", "varchar",
            "varnb", "varnb", "varchar", "varnb", "varnb", "varnb", "varnb", "varnb", "varnb", "varnb",
            "varnb", "varnb", "varnb", "varnb", "varchar", "varchar", "varchar", "varchar"
        ],
        "longueur": [
            12, 20, 20, 91, 15, 36, 5, 3, 2, 11, 3, 11, 11, 11, 3, 11, 11, 11, 11, 5, 4, 4, 23, 6, 19, 14
        ],
        "l√©gende": [
            "la marque", "le modele du dossier", "le mod√®le commercial", "la d√©signation commerciale",
            "le Code National d'Identification du Type (CNIT)", "le Type-Variante-Version (TVV) ou le type Mines",
            "le type de carburant", "v√©hicule hybride (O/N)", "puissance administrative",
            "puissance maximale (en kW)", "type bo√Æte de vitesse et nombre de rapports",
            "conso urbaine (l/100km)", "conso extra-urbaine (l/100km)", "conso mixte (l/100km)",
            "√©mission CO2 (g/km)", "CO type I", "HC", "NOx", "HC+NOX", "particules", "masse mini (kg)",
            "masse maxi (kg)", "norme EURO (champ V9)", "date de mise √† jour", "Carrosserie", "gamme"
        ],
        "unit√©": [
            "", "", "", "", "", "", "", "", "", "kW", "", "l/100 km", "l/100 km", "l/100 km",
            "g/km", "g/km", "g/km", "g/km", "g/km", "g/km", "kg", "kg", "", "", "", ""
        ]
    }
    meta_df = pd.DataFrame(meta_data)
    st.subheader("üìÑ Description des colonnes")
    st.dataframe(meta_df)    
    st.subheader("Exploration des donn√©es")
    st.markdown("""
                Langage utilis√© : Python 
                Librairies utilis√©es : Pandas, Numpy, Matplotlib, Seaborn, Scikit-learn
                """)
    
# Analyse des valeurs manquantes
st.subheader("üîß Valeurs manquantes")
missing = df.isnull().mean().sort_values(ascending=False)
missing = missing[missing > 0]
st.write(f"Colonnes avec valeurs manquantes : {len(missing)}")
st.bar_chart(missing)

if st.checkbox("Afficher les statistiques descriptives"):
    st.subheader("üìà Statistiques descriptives")
    st.dataframe(df.describe())

st.subheader("Les donn√©es pertinentes")
st.markdown("""
Dans le cadre de notre √©tude, plusieurs variables se r√©v√®lent particuli√®rement pertinentes pour expliquer les √©missions de CO‚ÇÇ, notre variable cible (exprim√©e en grammes par kilom√®tre ‚Äì g/km) :

- La puissance du moteur, exprim√©e en kilowatts (kW), indique la capacit√© du moteur √† produire de l‚Äô√©nergie.

- La cylindr√©e, mesur√©e en centim√®tres cubes (cm¬≥), correspond au volume total des cylindres du moteur.

- Le type de carburant utilis√© par le v√©hicule : essence, diesel, √©lectrique, hybride, GPL (gaz de p√©trole liqu√©fi√©) ou GNV (gaz naturel pour v√©hicule).

- La consommation de carburant, exprim√©e en litres pour 100 kilom√®tres (l/100 km), permet d‚Äô√©valuer l‚Äôefficacit√© √©nerg√©tique du v√©hicule.

- La masse du v√©hicule, en kilogrammes (kg), repr√©sente son poids √† vide.

- Le type de carrosserie, qui renvoie √† la structure et au design du v√©hicule (berline, break, coup√©, etc.).

- Le constructeur, autrement dit la marque qui fabrique le v√©hicule (ex. Renault, Peugeot, Volkswagen, Mercedes‚Ä¶). Certains constructeurs sont en effet plus avanc√©s que d‚Äôautres en mati√®re d‚Äôinnovation √©cologique et de r√©duction des √©missions.
            """)